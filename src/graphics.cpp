#include "graphics.h"

#include <SPI.h>


#define TFT_CS     10
#define TFT_RST    8
#define TFT_DC     9


const uint16_t Graphics::colors[16] = {
    COLOR_BROWN_DARKER , COLOR_GREEN_LIGHT   , COLOR_MUSTARD    , COLOR_YELLOW,
    COLOR_WHITISH      , COLOR_BLUE_DARK     , COLOR_ORANGE     , COLOR_BEIGE,
    COLOR_BEIGE_DARK   , COLOR_GREEN_DARK    , COLOR_BROWN_DARK , COLOR_BROWN,
    COLOR_BROWN_LIGHT  , COLOR_BROWN_LIGHTER , COLOR_CYAN       , COLOR_RED
};

//define a list of 8x8 tiles of colors from the above array -> a tile will have a size of 32 bytes -> maybe 64 would be enough -> 2048 bytes
const Graphics::tile_t Graphics::tiles[] PROGMEM = {
    {//walk1
        { 0, 0, 4, 4, 4, 4, 0, 0},
        { 0, 4, 8, 8, 8, 8, 4, 0},
        { 0, 4, 7, 7, 0,15, 4, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 0, 2, 2, 2, 0, 0, 0},
        { 0, 8, 2, 2, 2, 0, 0, 0},
        { 0, 0, 8, 8, 0, 0, 0, 0},
    },
    {//walk2
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 4, 8, 8, 8, 8, 0, 4},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 0, 2, 2, 2, 7, 0, 0},
        { 0, 0, 2, 2, 2, 7, 0, 0},
        { 0, 0, 7, 7, 0, 0, 0, 0},
    },
    {//walk3
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 4, 4, 4, 4, 4, 4},
        { 0, 4, 8, 8, 8, 8, 0, 0},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 4, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 2, 2, 2, 2, 2, 0, 0},
        { 7, 7, 0, 0, 0, 0, 7, 7},
    },
    {//walk4
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 4, 8, 8, 8, 8, 0, 4},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 4, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 7, 2, 2, 2, 2, 0, 0, 0},
        { 7, 0, 0, 7, 7, 0, 0, 0},
    },
    {//idle1
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 4, 8, 8, 8, 8, 0, 4},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 0, 2, 2, 2, 0, 0, 0},
        { 0, 0, 2, 2, 2, 0, 0, 0},
        { 0, 7, 7, 0, 7, 7, 0, 0},
    },
    {//idle2
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 4, 4, 4, 4, 4, 4},
        { 0, 4, 8, 8, 8, 8, 0, 0},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 2, 2, 2, 2, 2, 0, 0},
        { 0, 7, 7, 0, 7, 7, 0, 0},
    },
    {//idle3
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 4, 8, 8, 8, 8, 0, 4},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 2, 2, 2, 2, 2, 0, 0},
        { 0, 7, 7, 0, 7, 7, 0, 0},
    },
    {//idle4
        { 0, 0, 4, 4, 4, 4, 0, 0},
        { 0, 4, 8, 8, 8, 8, 4, 0},
        { 0, 4, 7, 7, 0,15, 4, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 0, 2, 2, 2, 0, 0, 0},
        { 0, 0, 2, 2, 2, 0, 0, 0},
        { 0, 7, 7, 0, 7, 7, 0, 0},
    },
    {//fall1
        { 0, 0, 0, 0, 0, 0, 0, 4},
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 4, 8, 8, 8, 8, 0, 0},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 7, 0, 2, 2, 2, 0, 7, 0},
        { 0, 7, 2, 2, 2, 7, 0, 0},
    },
    {//fall2
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 4, 4, 4, 4, 4, 4},
        { 0, 4, 8, 8, 8, 8, 0, 0},
        { 0, 4, 7, 7, 0,15, 0, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 7, 0, 2, 2, 2, 0, 7, 0},
        { 0, 7, 2, 2, 2, 7, 0, 0},
    },
    {//jump1
        { 0, 0, 4, 4, 4, 4, 0, 0},
        { 0, 4, 8, 8, 8, 8, 4, 0},
        { 0, 4, 7, 7, 0,15, 4, 0},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 0, 2, 2, 2, 0, 0, 0},
        { 0, 0, 7, 0, 7, 0, 0, 0},
        { 0, 0, 7, 0, 7, 0, 0, 0},
    },    
    {//jump2
        { 0, 0, 4, 4, 4, 4, 0, 0},
        { 0, 4, 8, 8, 8, 8, 4, 0},
        { 0, 4, 7, 7, 0,15, 0, 4},
        { 0, 0, 7, 7, 7,15, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 0, 2, 2, 2, 0, 0, 0},
        { 0, 0, 7, 0, 7, 0, 0, 0},
        { 0, 0, 7, 0, 7, 0, 0, 0},
    },
    {//climb1
        { 0, 0, 4, 4, 4, 0, 0, 0},
        { 0, 4, 4, 4, 4, 4, 0, 0},
        { 0, 4, 4, 4, 4, 4, 0, 0},
        { 0, 4, 4, 4, 4, 4, 0, 0},
        { 0, 0, 1, 1, 1, 0, 0, 0},
        { 0, 0, 2, 2, 2, 2, 0, 0},
        { 0, 2, 2, 0, 7, 7, 0, 0},
        { 0, 7, 7, 0, 0, 0, 0, 0},
    },
    {//climb2
        { 0, 0, 0, 4, 4, 4, 0, 0},
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 0, 4, 4, 4, 4, 4, 0},
        { 0, 0, 0, 1, 1, 1, 0, 0},
        { 0, 0, 2, 2, 2, 2, 0, 0},
        { 0, 0, 7, 7, 0, 2, 2, 0},
        { 0, 0, 0, 0, 0, 7, 7, 0},
    },
    {//coin1                                                                                        14
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 3, 6, 0, 0, 0},
        { 0, 0, 3, 7, 7, 6, 0, 0},
        { 0, 0, 3, 7, 7, 6, 0, 0},
        { 0, 0, 3, 7, 7, 6, 0, 0},
        { 0, 0, 0, 3, 6, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {//coin2
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 3, 6, 0, 0, 0},
        { 0, 0, 0, 3, 6, 0, 0, 0},
        { 0, 0, 0, 3, 6, 0, 0, 0},
        { 0, 0, 0, 3, 6, 0, 0, 0},
        { 0, 0, 0, 3, 6, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {//coin3
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 6, 3, 0, 0, 0},
        { 0, 0, 0, 6, 3, 0, 0, 0},
        { 0, 0, 0, 6, 3, 0, 0, 0},
        { 0, 0, 0, 6, 3, 0, 0, 0},
        { 0, 0, 0, 6, 3, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {//coin4
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 6, 3, 0, 0, 0},
        { 0, 0, 6, 7, 7, 3, 0, 0},
        { 0, 0, 6, 7, 7, 3, 0, 0},
        { 0, 0, 6, 7, 7, 3, 0, 0},
        { 0, 0, 0, 6, 3, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {//platform1_1                                                                                  18
        {13,13,11,13,13,11,13,13},
        {13,13,12,12,13,12,13,12},
        {12,12,12,12,11,11,12,11},
        {12,11,11,10,11,11,10,11},
        {11,11,10,10,10,10,10,10},
        {11,11,11,10,10, 0,11, 0},
        {12,11,11, 0, 0, 0, 0, 0},
        {12,10,10, 0, 0,10,10, 0},
    },
    {//platform1_2
        {11,13,13,11,13,13,13,11},
        {12,13,12,12,12,13,13,12},
        {11,12,11,11,11,12,11,11},
        {11,10,12,11,11,10,11,10},
        {10,10,10,10,10,10,10,10},
        { 0,10,10, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0,10,10, 0, 0},
        { 0,11, 0, 0, 0, 0, 0, 0},
    },
    {//platform1_3
        {13,13,11,13,13,11,13,13},
        {13,12,12,13,13,12,12,13},
        {12,11,11,12,11,11,12,12},
        {10,11,11,10,11,11,11,12},
        {10,10,10,10,10,10,11,12},
        { 0,10,10, 0, 0,11,11,11},
        { 0, 0, 0, 0, 0,11,11,11},
        {11, 0,10,10, 0,10,10,12},
    },
    {//platform1_4
        {11,11,11, 0, 0, 0, 0, 0},
        {11,11,10, 0,10,10, 0, 0},
        {12,11,11, 0,10, 0, 0, 0},
        {12,10,10, 0, 0, 0, 0, 0},
        {12,11,10, 0, 0, 0, 0,10},
        {11,11,10, 0,10,11, 0, 0},
        {12,11,11, 0,10,10, 0, 0},
        {12,10,10, 0, 0, 0, 0, 0},
    },
    {//platform1_5
        { 0, 0, 0, 0,11, 0, 0, 0},
        { 0,10,10, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0,10,10, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        {11, 0, 0, 0, 0, 0,11, 0},
        { 0, 0,10,10, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {//platform1_6
        { 0, 0, 0, 0, 0,11,11,12},
        { 0, 0, 0, 0, 0,10,11,11},
        { 0,10,10, 0, 0,11,11,11},
        { 0, 0, 0, 0,11,10,10,12},
        { 0, 0, 0, 0, 0,10,11,12},
        { 0, 0,10,10, 0,10,11,11},
        { 0, 0,10,10, 0,11,11,12},
        { 0, 0, 0, 0, 0,10,10,12},
    },
    {//stalactite                                                                                     24
        { 0,10,10,10,10,11,10, 0},
        { 0, 0,10,11, 0,11, 0, 0},
        { 0, 0, 0,11, 0,11, 0, 0},
        { 0, 0, 0,11, 0,10, 0, 0},
        { 0, 0, 0,10, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {//ladder                                                                                         25
        { 0,12,12,12,12,12,12, 0},
        { 0, 0,11, 0, 0,11, 0, 0},
        { 0,12,12,12,12,12,12, 0},
        { 0, 0,11, 0, 0,11, 0, 0},
        { 0,12,12,12,12,12,12, 0},
        { 0, 0,11, 0, 0,11, 0, 0},
        { 0,12,12,12,12,12,12, 0},
        { 0, 0,11, 0, 0,11, 0, 0},
    },
    {//puddle                                                                                         26
        { 1, 1, 1, 1, 1, 1, 1, 1},
        { 9, 9, 9, 9, 9, 9, 9, 9},
        { 1, 9, 9, 9, 9, 9, 9, 9},
        { 9, 9, 9, 9, 9, 9, 9, 9},
        { 9, 9, 9, 9, 9, 9, 9, 9},
        { 9, 9, 9, 9, 9, 9, 9, 9},
        { 9, 9, 9, 9, 9, 1, 9, 9},
        { 9, 9, 9, 9, 9, 9, 9, 9},
    },
    {//pipe                                                                                           27
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0,10,10,10,10, 0, 0},
        { 0,10, 0, 0, 0, 0,10, 0},
        { 0,10, 0, 0, 0, 0,10, 0},
        { 0,10, 0, 0, 0, 0,10, 0},
        { 0,10, 1, 1, 1, 1,10, 0},
        {10,10, 1, 9, 1, 1,10,10},
        { 0, 0, 9, 9, 1, 9, 0, 0},
    },
    {//stream                                                                                         28
        { 0, 0, 9, 9, 9, 9, 0, 0},
        { 0, 0, 1, 9, 9, 9, 0, 0},
        { 0, 0, 9, 9, 9, 9, 0, 0},
        { 0, 0, 9, 9, 9, 9, 0, 0},
        { 0, 0, 9, 9, 9, 9, 0, 0},
        { 0, 0, 9, 9, 9, 9, 0, 0},
        { 0, 0, 9, 9, 1, 9, 0, 0},
        { 0, 0, 9, 9, 1, 9, 0, 0},        
    },
    {//empty
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
        { 0, 0, 0, 0, 0, 0, 0, 0},
    }
};

//define a list of meta-tiles of tiles from the list above, if there is a reason to
/*
const metatile_t metatiles[] PROGMEM = {
    {
        {{.index = 1, .flip = 0}},
        {{.index = 2, .flip = 0}},
        {{.index = 3, .flip = 0}},
        {{.index = 0, .flip = 0}},
    }
};
*/

//for the future:
//      - implement a sparse matrix for the level, a lot of entries are just background colored/empty tiles
//      - don't store it in progmem but actually make it loadable from sdcard or if the game is suited make the levels procedural
const Graphics::tile_index_t Graphics::level[16][20] /*PROGMEM*/ =  {
    {{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{18, 0},{25, 0},{19, 0},{19, 0},{19, 0}},
    {{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{19, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{19, 0},{19, 0},{19, 0},{19, 0},{19, 0},{22, 0},{19, 0},{19, 0},{19, 0},{19, 0},{20, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{23, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{23, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0},{23, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{24, 0},{24, 0},{24, 0},{24, 0},{24, 0},{24, 0},{24, 0},{24, 0},{24, 0},{24, 0},{24, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{25, 0},{22, 0},{22, 0},{22, 0}},
    {{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{18, 0},{19, 0},{19, 0},{22, 0},{22, 0},{22, 0}},
    {{29, 0},{29, 0},{29, 0},{27, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{21, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0}},
    {{29, 0},{29, 0},{29, 0},{28, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{27, 0},{29, 0},{29, 0},{21, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0}},
    {{19, 0},{20, 0},{29, 0},{28, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{29, 0},{28, 0},{29, 0},{29, 0},{21, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0}},
    {{22, 0},{23, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{26, 0},{21, 0},{22, 0},{22, 0},{22, 0},{22, 0},{22, 0}},
};


Graphics::Graphics() 
    : mTFT(TFT_ST7735(TFT_CS, TFT_DC, TFT_RST))
{
    mTFT.begin();
    mTFT.setRotation(3);
}

Graphics::~Graphics() {}

void Graphics::fillScreen(uint16_t color) {
    mTFT.fillScreen(color);
}

void Graphics::drawLevel() {
    for (int i = 0; i < 16; i++) {
        for(int j = 0; j < 20; j++) {
            if(i*8 >= 128 || j*8 >= 160)
                continue;
            //tile_index_t tile_index {.packed = pgm_read_byte_near(&level[i][j])};
            //DRAW_TILE(tile_index.tile_index.index,  j*SIZE, i*SIZE, SIZE);
            drawTile(level[i][j].tile_index.index,  j*8, i*8, 8);
        }
    }
}

void Graphics::drawTile(uint8_t index, uint16_t x, uint16_t y, uint8_t size, bool flip = false) {
    mTFT.setArea(x, y, x+size-1, y+size-1);
    for (int i = 0; i < 8; i++) {
        tile_row_t r{ .packed = pgm_read_dword_near(&tiles[index][i]) };
        if (flip) {
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col8]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col7]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col6]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col5]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col4]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col3]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col2]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col1]));
        } else {
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col1]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col2]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col3]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col4]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col5]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col6]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col7]));
            mTFT.pushColor(pgm_read_word_near(&colors[r.row.col8]));
        }
    }
}

void Graphics::drawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
    mTFT.fillRect(x, y, w, h, color);
}

uint8_t Graphics::getTileAt(uint16_t x, uint16_t y) {
    return level[y>>3][x>>3].tile_index.index;
}